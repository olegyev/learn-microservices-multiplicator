{"version":3,"sources":["services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAAMA,E,8FAMF,WACI,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGlD,SACIC,EACAC,EACAC,EACAC,GAEA,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAC1C,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UACP,CACIC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KA3BzBP,EAEKE,WAAa,wBAFlBF,EAGKG,cAAgB,qBAHrBH,EAIKQ,YAAc,YA+BVR,Q,OCwEAiB,E,kDAtGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTd,EAAG,GACHC,EAAG,GACHF,KAAM,GACNgB,QAAS,GACTb,MAAO,GAEX,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVL,E,qDAanB,WAA2B,IAAD,OACtBtB,EAAUwB,YAAYC,MAClB,SAAAC,GACQA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACZ,EAAKC,SAAS,CACVxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIhB,EAAKc,cAAc,+B,0BAMnC,SAAaC,GACT,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKL,SAAL,eACKG,EAAOD,EAAME,OAAOE,U,gCAI7B,SAAmBJ,GAAQ,IAAD,OACtBA,EAAMK,iBACNpC,EAAUqC,UACNH,KAAKf,MAAMf,KACX8B,KAAKf,MAAMd,EACX6B,KAAKf,MAAMb,EACX4B,KAAKf,MAAMZ,OACbkB,MAAK,SAAAC,GACCA,EAAIC,GACJD,EAAIE,OAAOH,MAAK,SAAAG,GACRA,EAAKU,QACL,EAAKR,cAAc,oCAEnB,EAAKA,cAAc,sBAAwBF,EAAKW,cAAgB,mBAIxE,EAAKT,cAAc,gD,2BAK/B,SAAcU,GACVN,KAAKL,SAAS,CACVT,QAASoB,M,oBAIjB,WACI,OACI,gCACI,gCACI,uDACA,+BAAKN,KAAKf,MAAMd,EAAhB,MAAsB6B,KAAKf,MAAMb,QAErC,uBAAMmC,SAAUP,KAAKb,mBAArB,UACI,gDAEI,uBACIqB,KAAK,OACLC,UAAU,KACVX,KAAK,OACLG,MAAOD,KAAKf,MAAMf,KAClBwC,SAAUV,KAAKX,kBAEvB,uBACA,gDAEI,uBACImB,KAAK,SACLG,IAAI,IACJb,KAAK,QACLG,MAAOD,KAAKf,MAAMZ,MAClBqC,SAAUV,KAAKX,kBAEvB,uBACA,uBAAOmB,KAAK,SAASP,MAAM,cAE/B,6BAAKD,KAAKf,MAAMC,iB,GAjGC0B,aCWlBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f6f0cb7b.chunk.js","sourcesContent":["class ApiClient {\n\n    static SERVER_URL = 'http://localhost:8080';\n    static GET_CHALLENGE = '/challenges/random';\n    static POST_RESULT = '/attempts';\n\n    static challenge(): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n    }\n\n    static sendGuess(\n        user: string,\n        a: number,\n        b: number,\n        guess: number\n    ): Promise<Response> {\n        return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT,\n            {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(\n                    {\n                        userAlias: user,\n                        factorA: a,\n                        factorB: b,\n                        guess: guess\n                    }\n                )\n            });\n    }\n\n}\n\nexport default ApiClient;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\n\nclass ChallengeComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            a: '',\n            b: '',\n            user: '',\n            message: '',\n            guess: 0\n        };\n        this.handleSubmitResult = this.handleSubmitResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(): void {\n        ApiClient.challenge().then(\n            res => {\n                if (res.ok) {\n                    res.json().then(json => {\n                        this.setState({\n                            a: json.factorA,\n                            b: json.factorB\n                        });\n                    });\n                } else {\n                    this.updateMessage(\"Can't reach the server\");\n                }\n            }\n        );\n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n    handleSubmitResult(event) {\n        event.preventDefault();\n        ApiClient.sendGuess(\n            this.state.user,\n            this.state.a,\n            this.state.b,\n            this.state.guess\n        ).then(res => {\n            if (res.ok) {\n                res.json().then(json => {\n                    if (json.correct) {\n                        this.updateMessage(\"Congrats! Your guess is correct!\");\n                    } else {\n                        this.updateMessage(\"Ouch... Your guess \" + json.resultAttempt + \" is wrong :(\");\n                    }\n                })\n            } else {\n                this.updateMessage(\"Server error occurred. Try again later.\");\n            }\n        });\n    }\n\n    updateMessage(m: string) {\n        this.setState({\n            message: m\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                <div>\n                    <h3>Your new challenge is</h3>\n                    <h1>{this.state.a} X {this.state.b}</h1>\n                </div>\n                <form onSubmit={this.handleSubmitResult}>\n                    <label>\n                        Your alias:\n                        <input \n                            type=\"text\"\n                            maxLength=\"12\"\n                            name=\"user\"\n                            value={this.state.user}\n                            onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Your guess:\n                        <input\n                            type=\"number\"\n                            min=\"0\"\n                            name=\"guess\"\n                            value={this.state.guess}\n                            onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n                <h4>{this.state.message}</h4>\n            </div>\n        );\n    }\n\n}\n\nexport default ChallengeComponent;","import React from 'react';\nimport './App.css';\nimport ChallengeComponent from './components/ChallengeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChallengeComponent />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}